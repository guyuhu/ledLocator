Interrupt Vectors
    00000 940C 003C JMP	__text_start|__start
    00012 940C 0107 JMP	_timer0_ovf_isr

Program Code (text area)
__text_start|__start:
    0003C E5CF      LDI	R28,0x5F
    0003D E0D4      LDI	R29,4
    0003E BFCD      OUT	0x3D,R28
    0003F BFDE      OUT	0x3E,R29
    00040 51CE      SUBI	R28,0x1E
    00041 40D0      SBCI	R29,0
    00042 EA0A      LDI	R16,0xAA
    00043 8308      ST	Y,R16
    00044 2400      CLR	R0
    00045 E8E3      LDI	R30,0x83
    00046 E0F0      LDI	R31,0
    00047 E010      LDI	R17,0
    00048 38E4      CPI	R30,0x84
    00049 07F1      CPC	R31,R17
    0004A F011      BEQ	0x004D
    0004B 9201      ST	Z+,R0
    0004C CFFB      RJMP	0x0048
    0004D 8300      ST	Z,R16
    0004E E5E4      LDI	R30,0x54
    0004F E0F0      LDI	R31,0
    00050 E6A0      LDI	R26,0x60
    00051 E0B0      LDI	R27,0
    00052 E010      LDI	R17,0
    00053 E000      LDI	R16,0
    00054 BF0B      OUT	0x3B,R16
    00055 37E7      CPI	R30,0x77
    00056 07F1      CPC	R31,R17
    00057 F021      BEQ	0x005C
    00058 95C8      LPM
    00059 9631      ADIW	R30,1
    0005A 920D      ST	X+,R0
    0005B CFF9      RJMP	0x0055
    0005C 940E 00F9 CALL	_main
_exit:
    0005E CFFF      RJMP	_exit
FILE: E:\MCU\AVR\project\ledLocator\ledLoctor.c
(0001) /**************************(C) COPYRIGHT emouse 2011***************************
(0002) 名称：main.c
(0003) 功能：模拟SPI程序测试
(0004) 作者：emouse
(0005) 时间：2011.1.11
(0006) 版本：1.0
(0007) 注意：无
(0008) *******************************************************************************/
(0009) //#include <iot13v.h>
(0010) #include <iom16v.h>
(0011) #include <macros.h>
(0012) 
(0013) /***************模拟SPI的相关宏定义********************/
(0014) #define SPI1_Port PORTB     //设置使用的端口         
(0015) #define SPI1_MOSI 0			//设置每个信号对应的引脚
(0016) #define SPI1_MOSI_H (SPI1_Port|=(1<<SPI1_MOSI))
(0017) #define SPI1_MOSI_L (SPI1_Port&=~(1<<SPI1_MOSI))
(0018) 
(0019) unsigned char guideMessage[8]={1,0,1,0,1,0,1,0};
(0020) unsigned char idMessage[8]   ={0,0,0,1,0,0,0,1};
(0021) unsigned char coordMessage[8]={0,0,0,1,0,0,0,1};
(0022) unsigned char checkMessage[8]={0,0,0,0,0,0,0,0};
(0023) /*
(0024) unsigned char guideMessage=0x01010101;
(0025) unsigned char idMessage=1;
(0026) unsigned int coordXMessage=300;
(0027) unsigned int coordYMessage=300;
(0028) */
(0029) 
(0030) unsigned char i;
(0031) unsigned int addTime=0;
(0032) unsigned char endlineFlag=0;
(0033) 
(0034) void _delay_us(unsigned int delay)
(0035) {
(0036)  	 for(i=0;i<10;i++)
__delay_us:
  delay                --> R16
    0005F 2422      CLR	R2
    00060 9220 0083 STS	i,R2
    00062 C00A      RJMP	0x006D
(0037) 	 {
(0038) 	   while(delay!=0)
(0039) 	   {
(0040) 	   		delay--;		
    00063 5001      SUBI	R16,1
    00064 4010      SBCI	R17,0
    00065 3000      CPI	R16,0
    00066 0701      CPC	R16,R17
    00067 F7D9      BNE	0x0063
    00068 9180 0083 LDS	R24,i
    0006A 5F8F      SUBI	R24,0xFF
    0006B 9380 0083 STS	i,R24
    0006D 9180 0083 LDS	R24,i
    0006F 308A      CPI	R24,0xA
    00070 F3A0      BCS	0x0065
    00071 9508      RET
(0041) 	   }
(0042) 	 }
(0043) }
(0044) 
(0045) /*******************************************************************************
(0046) 名称：checkOut
(0047) 功能：校验3个数组，得到校验值。
(0048) *******************************************************************************/
(0049) void checkOut()
(0050) {
(0051) 	for(i=0;i<=7;i++)
_checkOut:
    00072 2422      CLR	R2
    00073 9220 0083 STS	i,R2
    00075 C025      RJMP	0x009B
(0052) 	{
(0053) 		checkMessage[i]=guideMessage[i]^idMessage[i]^coordMessage[i];
    00076 9040 0083 LDS	R4,i
    00078 E688      LDI	R24,0x68
    00079 E090      LDI	R25,0
    0007A 2DE4      MOV	R30,R4
    0007B 27FF      CLR	R31
    0007C 0FE8      ADD	R30,R24
    0007D 1FF9      ADC	R31,R25
    0007E 8020      LD	R2,Z
    0007F E680      LDI	R24,0x60
    00080 E090      LDI	R25,0
    00081 2DE4      MOV	R30,R4
    00082 27FF      CLR	R31
    00083 0FE8      ADD	R30,R24
    00084 1FF9      ADC	R31,R25
    00085 8030      LD	R3,Z
    00086 2432      EOR	R3,R2
    00087 E780      LDI	R24,0x70
    00088 E090      LDI	R25,0
    00089 2DE4      MOV	R30,R4
    0008A 27FF      CLR	R31
    0008B 0FE8      ADD	R30,R24
    0008C 1FF9      ADC	R31,R25
    0008D 8020      LD	R2,Z
    0008E 2432      EOR	R3,R2
    0008F E788      LDI	R24,0x78
    00090 E090      LDI	R25,0
    00091 2DE4      MOV	R30,R4
    00092 27FF      CLR	R31
    00093 0FE8      ADD	R30,R24
    00094 1FF9      ADC	R31,R25
    00095 8230      ST	Z,R3
    00096 9180 0083 LDS	R24,i
    00098 5F8F      SUBI	R24,0xFF
    00099 9380 0083 STS	i,R24
    0009B E087      LDI	R24,7
    0009C 9020 0083 LDS	R2,i
    0009E 1582      CP	R24,R2
    0009F F6B0      BCC	0x0076
    000A0 9508      RET
_SPI1_Send:
  i                    --> R10
  data                 --> R12
    000A1 940E 0136 CALL	push_xgset003C
    000A3 0168      MOVW	R12,R16
(0054) 	}
(0055) }
(0056) 
(0057) /*******************************************************************************
(0058) 名称：SPI1_Send(unsigned char data)
(0059) 功能：发送SPI数据
(0060) 参数：unsigned char data
(0061) *******************************************************************************/
(0062) void SPI1_Send(unsigned char data[8])
(0063) {
(0064)     unsigned char i;
(0065)     SPI1_MOSI_L;
    000A4 98C0      CBI	0x18,0
(0066)     for(i=0;i<8;i++)
    000A5 24AA      CLR	R10
    000A6 C019      RJMP	0x00C0
(0067)     {
(0068) 	
(0069) 	  	if(data[i]==0) 
    000A7 2DEA      MOV	R30,R10
    000A8 27FF      CLR	R31
    000A9 0DEC      ADD	R30,R12
    000AA 1DFD      ADC	R31,R13
    000AB 8020      LD	R2,Z
    000AC 2022      TST	R2
    000AD F449      BNE	0x00B7
(0070) 		{
(0071) 		 	 SPI1_MOSI_H;
    000AE 9AC0      SBI	0x18,0
(0072) 			_delay_us(20);
    000AF E104      LDI	R16,0x14
    000B0 E010      LDI	R17,0
    000B1 DFAD      RCALL	__delay_us
(0073) 			SPI1_MOSI_L;
    000B2 98C0      CBI	0x18,0
(0074) 			_delay_us(10);											   
    000B3 E00A      LDI	R16,0xA
    000B4 E010      LDI	R17,0
    000B5 DFA9      RCALL	__delay_us
(0075) 		}   
    000B6 C008      RJMP	0x00BF
(0076)         else
(0077) 		{
(0078) 		 	SPI1_MOSI_H;
    000B7 9AC0      SBI	0x18,0
(0079) 			_delay_us(20);
    000B8 E104      LDI	R16,0x14
    000B9 E010      LDI	R17,0
    000BA DFA4      RCALL	__delay_us
(0080) 			SPI1_MOSI_L;
    000BB 98C0      CBI	0x18,0
(0081) 			_delay_us(50);
    000BC E302      LDI	R16,0x32
    000BD E010      LDI	R17,0
    000BE DFA0      RCALL	__delay_us
    000BF 94A3      INC	R10
    000C0 2D8A      MOV	R24,R10
    000C1 3088      CPI	R24,0x8
    000C2 F320      BCS	0x00A7
    000C3 940C 012B JMP	pop_xgset003C
(0082) 		}
(0083)     }
(0084) }
(0085) 
(0086) /*******************************************************************************
(0087) 名称：setMessage()
(0088) 功能：发送所有的数组信息
(0089) *******************************************************************************/
(0090) void setMessage()
(0091) {
(0092) 
(0093)  	 SPI1_MOSI_H;		//	5单位高电平	标示数据帧开始，便于解析													
_setMessage:
    000C5 9AC0      SBI	0x18,0
(0094) 	_delay_us(100);
    000C6 E604      LDI	R16,0x64
    000C7 E010      LDI	R17,0
    000C8 DF96      RCALL	__delay_us
(0095) 	SPI1_MOSI_L;
    000C9 98C0      CBI	0x18,0
(0096) 	_delay_us(10);
    000CA E00A      LDI	R16,0xA
    000CB E010      LDI	R17,0
    000CC DF92      RCALL	__delay_us
(0097) 	
(0098) 	SPI1_Send(guideMessage);
    000CD E600      LDI	R16,0x60
    000CE E010      LDI	R17,0
    000CF DFD1      RCALL	_SPI1_Send
(0099) 	SPI1_Send(idMessage);
    000D0 E608      LDI	R16,0x68
    000D1 E010      LDI	R17,0
    000D2 DFCE      RCALL	_SPI1_Send
(0100) 	SPI1_Send(coordMessage);
    000D3 E700      LDI	R16,0x70
    000D4 E010      LDI	R17,0
    000D5 DFCB      RCALL	_SPI1_Send
(0101) 	SPI1_Send(checkMessage);
    000D6 E708      LDI	R16,0x78
    000D7 E010      LDI	R17,0
    000D8 DFC8      RCALL	_SPI1_Send
(0102) 	
(0103) 	SPI1_MOSI_H;			//	10单位高电平	标示数据帧结束，便于解析
    000D9 9AC0      SBI	0x18,0
(0104) 	_delay_us(150);
    000DA E906      LDI	R16,0x96
    000DB E010      LDI	R17,0
    000DC DF82      RCALL	__delay_us
(0105) 	SPI1_MOSI_L;
    000DD 98C0      CBI	0x18,0
(0106) 	_delay_us(10);
    000DE E00A      LDI	R16,0xA
    000DF E010      LDI	R17,0
    000E0 CF7E      RJMP	__delay_us
(0107) }
(0108) 
(0109) // Target : M16
(0110) // Crystal: 12.000Mhz
(0111) //TIMER0 initialize - prescale:1024
(0112) // WGM: Normal
(0113) // desired value: 100Hz
(0114) // actual value: 100.160Hz (0.2%)
(0115) void timer0_init(void)
(0116) {
(0117)  TCCR0 = 0x00; //stop
_timer0_init:
    000E1 2422      CLR	R2
    000E2 BE23      OUT	0x33,R2
(0118)  TCNT0 = 0x8B; //set count
    000E3 E88B      LDI	R24,0x8B
    000E4 BF82      OUT	0x32,R24
(0119)  //OCR0  = 0x75;  //set compare
(0120)  TCCR0 = 0x05; //start timer
    000E5 E085      LDI	R24,5
    000E6 BF83      OUT	0x33,R24
    000E7 9508      RET
(0121) }
(0122) 
(0123) //call this routine to initialize all peripherals
(0124) void init_devices(void)
(0125) {
(0126)  //stop errant interrupts until set up
(0127)  CLI(); //disable all interrupts
_init_devices:
    000E8 94F8      BCLR	7
(0128)  
(0129)  DDRA=0xff;                 //用于打开LED锁存
    000E9 EF8F      LDI	R24,0xFF
    000EA BB8A      OUT	0x1A,R24
(0130)  PORTA=0xfb;//打开LED灯总线 PA2脚输出底电平，打开LED锁存
    000EB EF8B      LDI	R24,0xFB
    000EC BB8B      OUT	0x1B,R24
(0131)  
(0132)  DDRB=0XFF;
    000ED EF8F      LDI	R24,0xFF
    000EE BB87      OUT	0x17,R24
(0133)  PORTB=0X04;
    000EF E084      LDI	R24,4
    000F0 BB88      OUT	0x18,R24
(0134) 
(0135)  timer0_init();
    000F1 DFEF      RCALL	_timer0_init
(0136) 
(0137)  MCUCR = 0x00;
    000F2 2422      CLR	R2
    000F3 BE25      OUT	0x35,R2
(0138)  GICR  = 0x00;
    000F4 BE2B      OUT	0x3B,R2
(0139)  TIMSK = 0x01; //timer interrupt sources
    000F5 E081      LDI	R24,1
    000F6 BF89      OUT	0x39,R24
(0140)  SEI(); //re-enable interrupts
    000F7 9478      BSET	7
    000F8 9508      RET
(0141) }
(0142) 
(0143) void main(void)
(0144) {   
(0145)     init_devices();
_main:
    000F9 DFEE      RCALL	_init_devices
(0146) 	checkOut();
    000FA DF77      RCALL	_checkOut
    000FB C009      RJMP	0x0105
(0147)     while(1)
(0148)     {
(0149) 		  if(endlineFlag==1)
    000FC 9180 0082 LDS	R24,endlineFlag
    000FE 3081      CPI	R24,1
    000FF F429      BNE	0x0105
(0150) 		 {
(0151) 		  	setMessage();
    00100 DFC4      RCALL	_setMessage
(0152) 			endlineFlag=0;	
    00101 2422      CLR	R2
    00102 9220 0082 STS	endlineFlag,R2
(0153) 			PORTB|=0x04;				
    00104 9AC2      SBI	0x18,2
    00105 CFF6      RJMP	0x00FC
    00106 9508      RET
_timer0_ovf_isr:
    00107 922A      ST	-Y,R2
    00108 923A      ST	-Y,R3
    00109 938A      ST	-Y,R24
    0010A 939A      ST	-Y,R25
    0010B B62F      IN	R2,0x3F
    0010C 922A      ST	-Y,R2
(0154) 		  }
(0155) 		 // PORTB|=0x01;
(0156)     }
(0157) }
(0158) 
(0159) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0160) void timer0_ovf_isr(void)
(0161) {
(0162)  	 TCNT0 = 0x8B; //reload counter value
    0010D E88B      LDI	R24,0x8B
    0010E BF82      OUT	0x32,R24
(0163) 	 addTime++;
    0010F 9180 0080 LDS	R24,addTime
    00111 9190 0081 LDS	R25,addTime+1
    00113 9601      ADIW	R24,1
    00114 9390 0081 STS	addTime+1,R25
    00116 9380 0080 STS	addTime,R24
(0164) 	/* if(addTime==100)
(0165) 	 {
(0166) 	  	endlineFlag=1;
(0167) 		addTime=0;
(0168) 		PORTB&=0xfb;  //用个小灯来显示，如果出现闪说明进入了中断。
(0169) 	 }
(0170) 	 */
(0171) 	 endlineFlag=1;
    00118 E081      LDI	R24,1
    00119 9380 0082 STS	endlineFlag,R24
(0172) 		addTime=0;
    0011B 2422      CLR	R2
    0011C 2433      CLR	R3
    0011D 9230 0081 STS	addTime+1,R3
    0011F 9220 0080 STS	addTime,R2
(0173) 		PORTB&=0xfb;  //用个小灯来显示，如果出现闪说明进入了中断。
FILE: <library>
    00121 B388      IN	R24,0x18
    00122 7F8B      ANDI	R24,0xFB
    00123 BB88      OUT	0x18,R24
    00124 9029      LD	R2,Y+
    00125 BE2F      OUT	0x3F,R2
    00126 9199      LD	R25,Y+
    00127 9189      LD	R24,Y+
    00128 9039      LD	R3,Y+
    00129 9029      LD	R2,Y+
    0012A 9518      RETI
pop_xgset003C:
    0012B 90A9      LD	R10,Y+
    0012C 90B9      LD	R11,Y+
    0012D 90C9      LD	R12,Y+
    0012E 90D9      LD	R13,Y+
    0012F 9508      RET
push_xgsetF0FC:
    00130 937A      ST	-Y,R23
    00131 936A      ST	-Y,R22
push_xgset30FC:
    00132 935A      ST	-Y,R21
    00133 934A      ST	-Y,R20
push_xgset00FC:
    00134 92FA      ST	-Y,R15
    00135 92EA      ST	-Y,R14
push_xgset003C:
    00136 92DA      ST	-Y,R13
    00137 92CA      ST	-Y,R12
    00138 92BA      ST	-Y,R11
    00139 92AA      ST	-Y,R10
    0013A 9508      RET
